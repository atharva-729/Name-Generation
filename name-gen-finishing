{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":1098288,"sourceType":"datasetVersion","datasetId":613951}],"dockerImageVersionId":30732,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","execution":{"iopub.status.busy":"2024-07-07T08:36:12.585176Z","iopub.execute_input":"2024-07-07T08:36:12.585908Z","iopub.status.idle":"2024-07-07T08:36:13.520608Z","shell.execute_reply.started":"2024-07-07T08:36:12.585873Z","shell.execute_reply":"2024-07-07T08:36:13.519527Z"},"trusted":true},"execution_count":1,"outputs":[{"name":"stdout","text":"/kaggle/input/indian-names-boys-girls/Names.txt\n","output_type":"stream"}]},{"cell_type":"code","source":"import torch\nimport torch.nn.functional as F\nimport matplotlib.pyplot as plt","metadata":{"execution":{"iopub.status.busy":"2024-07-07T08:36:16.301451Z","iopub.execute_input":"2024-07-07T08:36:16.301937Z","iopub.status.idle":"2024-07-07T08:36:19.031111Z","shell.execute_reply.started":"2024-07-07T08:36:16.301905Z","shell.execute_reply":"2024-07-07T08:36:19.030082Z"},"trusted":true},"execution_count":2,"outputs":[]},{"cell_type":"code","source":"with open(\"/kaggle/input/indian-names-boys-girls/Names.txt\", \"r\") as f:\n    names = f.read()\nnames = names.splitlines()\nnames = [n.lower() for n in names]","metadata":{"execution":{"iopub.status.busy":"2024-07-07T08:36:28.980248Z","iopub.execute_input":"2024-07-07T08:36:28.981101Z","iopub.status.idle":"2024-07-07T08:36:29.013343Z","shell.execute_reply.started":"2024-07-07T08:36:28.981067Z","shell.execute_reply":"2024-07-07T08:36:29.012457Z"},"trusted":true},"execution_count":3,"outputs":[]},{"cell_type":"code","source":"# encoding\nchars = sorted(list(set(\"\".join(names))))\nstoi = {s:i for i,s in enumerate(chars)}\nitos = {i:s for s, i in stoi.items()}\nvocab_size = len(itos)\nprint(itos)\nprint(vocab_size)","metadata":{"execution":{"iopub.status.busy":"2024-07-07T08:36:34.580513Z","iopub.execute_input":"2024-07-07T08:36:34.581178Z","iopub.status.idle":"2024-07-07T08:36:34.596455Z","shell.execute_reply.started":"2024-07-07T08:36:34.581146Z","shell.execute_reply":"2024-07-07T08:36:34.595349Z"},"trusted":true},"execution_count":4,"outputs":[{"name":"stdout","text":"{0: ' ', 1: '-', 2: '.', 3: 'a', 4: 'b', 5: 'c', 6: 'd', 7: 'e', 8: 'f', 9: 'g', 10: 'h', 11: 'i', 12: 'j', 13: 'k', 14: 'l', 15: 'm', 16: 'n', 17: 'o', 18: 'p', 19: 'q', 20: 'r', 21: 's', 22: 't', 23: 'u', 24: 'v', 25: 'w', 26: 'x', 27: 'y', 28: 'z'}\n29\n","output_type":"stream"}]},{"cell_type":"code","source":"block_size = 8\n\ndef build_dataset(names):  \n    X, Y = [], []\n\n    for w in names:\n        context = [2] * block_size\n        for ch in w + '.':\n            ix = stoi[ch]\n            X.append(context)\n            Y.append(ix)\n            context = context[1:] + [ix] # crop and append\n\n    X = torch.tensor(X)\n    Y = torch.tensor(Y)\n    print(X.shape, Y.shape)\n    return X, Y\n\nimport random\nrandom.seed(42)\nrandom.shuffle(names)\nn1 = int(0.8*len(names))\nn2 = int(0.9*len(names))\n\nXtr,  Ytr  = build_dataset(names[:n1])  \nXdev, Ydev = build_dataset(names[n1:n2])\nXte,  Yte  = build_dataset(names[n2:])  ","metadata":{"execution":{"iopub.status.busy":"2024-07-07T08:37:05.425395Z","iopub.execute_input":"2024-07-07T08:37:05.426062Z","iopub.status.idle":"2024-07-07T08:37:07.446631Z","shell.execute_reply.started":"2024-07-07T08:37:05.426027Z","shell.execute_reply":"2024-07-07T08:37:07.445578Z"},"trusted":true},"execution_count":6,"outputs":[{"name":"stdout","text":"torch.Size([404959, 8]) torch.Size([404959])\ntorch.Size([50731, 8]) torch.Size([50731])\ntorch.Size([50689, 8]) torch.Size([50689])\n","output_type":"stream"}]},{"cell_type":"code","source":"# make these classes ourselves and make a deeper netwrok\nclass Linear:\n  \n  def __init__(self, fan_in, fan_out, bias=True):\n    self.weight = torch.randn((fan_in, fan_out)) / fan_in**0.5 # note: kaiming init\n    self.bias = torch.zeros(fan_out) if bias else None\n  \n  def __call__(self, x):\n    self.out = x @ self.weight\n    if self.bias is not None:\n      self.out += self.bias\n    return self.out\n  \n  def parameters(self):\n    return [self.weight] + ([] if self.bias is None else [self.bias])\n\n# -----------------------------------------------------------------------------------------------\nclass BatchNorm1d:\n  \n  def __init__(self, dim, eps=1e-5, momentum=0.1):\n    self.eps = eps\n    self.momentum = momentum\n    self.training = True\n    # parameters (trained with backprop)\n    self.gamma = torch.ones(dim)\n    self.beta = torch.zeros(dim)\n    # buffers (trained with a running 'momentum update')\n    self.running_mean = torch.zeros(dim)\n    self.running_var = torch.ones(dim)\n  \n  def __call__(self, x):\n    # calculate the forward pass\n    if self.training:\n        if x.ndim == 2:\n            dim = 0\n        elif x.ndim == 3:\n            dim = (0,1)\n        xmean = x.mean(dim, keepdim=True) # batch mean\n        xvar = x.var(dim, keepdim=True) # batch variance\n    else:\n        xmean = self.running_mean\n        xvar = self.running_var\n    xhat = (x - xmean) / torch.sqrt(xvar + self.eps) # normalize to unit variance\n    self.out = self.gamma * xhat + self.beta\n    # update the buffers\n    if self.training:\n        with torch.no_grad():\n            self.running_mean = (1 - self.momentum) * self.running_mean + self.momentum * xmean\n            self.running_var = (1 - self.momentum) * self.running_var + self.momentum * xvar\n    return self.out\n  \n    def parameters(self):\n        return [self.gamma, self.beta]\n\n# -----------------------------------------------------------------------------------------------\nclass Tanh:\n    def __call__(self, x):\n        self.out = torch.tanh(x)\n        return self.out\n    def parameters(self):\n        return []\n\nclass Embedding:\n  \n    def __init__(self, num_embeddings, embedding_dim):\n        self.weight = torch.randn((num_embeddings, embedding_dim))\n\n    def __call__(self, IX):\n        self.out = self.weight[IX]\n        return self.out\n\n    def parameters(self):\n        return [self.weight]\n\n# -----------------------------------------------------------------------------------------------\nclass FlattenConsecutive:\n  \n    def __init__(self, n):\n        self.n = n\n\n    def __call__(self, x):\n        B, T, C = x.shape\n        x = x.view(B, T//self.n, C*self.n)\n        if x.shape[1] == 1:\n            x = x.squeeze(1)\n        self.out = x\n        return self.out\n\n    def parameters(self):\n        return []\n\n# -----------------------------------------------------------------------------------------------\nclass Sequential:\n  \n    def __init__(self, layers):\n        self.layers = layers\n\n    def __call__(self, x):\n        for layer in self.layers:\n            x = layer(x)\n        self.out = x\n        return self.out\n\n    def parameters(self):\n        params = []\n        for layer in self.layers:\n            if hasattr(layer, 'parameters'):  # check if layer has parameters\n                params.extend(layer.parameters())\n            if hasattr(layer, 'buffers'):  # check if layer has buffers (BatchNorm1d)\n                params.extend(layer.buffers())\n        return params","metadata":{"execution":{"iopub.status.busy":"2024-07-07T08:48:29.068386Z","iopub.execute_input":"2024-07-07T08:48:29.068809Z","iopub.status.idle":"2024-07-07T08:48:29.087537Z","shell.execute_reply.started":"2024-07-07T08:48:29.068778Z","shell.execute_reply":"2024-07-07T08:48:29.086352Z"},"trusted":true},"execution_count":15,"outputs":[]},{"cell_type":"code","source":"torch.manual_seed(42);","metadata":{"execution":{"iopub.status.busy":"2024-07-07T08:40:09.060672Z","iopub.execute_input":"2024-07-07T08:40:09.061449Z","iopub.status.idle":"2024-07-07T08:40:09.068183Z","shell.execute_reply.started":"2024-07-07T08:40:09.061415Z","shell.execute_reply":"2024-07-07T08:40:09.067355Z"},"trusted":true},"execution_count":10,"outputs":[]},{"cell_type":"code","source":"# hierarchical network\nn_embd = 24 # the dimensionality of the character embedding vectors\nn_hidden = 128 # the number of neurons in the hidden layer of the MLP\nmodel = Sequential([\n  Embedding(vocab_size, n_embd),\n  FlattenConsecutive(2), Linear(n_embd * 2, n_hidden, bias=False), BatchNorm1d(n_hidden), Tanh(),\n  FlattenConsecutive(2), Linear(n_hidden*2, n_hidden, bias=False), BatchNorm1d(n_hidden), Tanh(),\n  FlattenConsecutive(2), Linear(n_hidden*2, n_hidden, bias=False), BatchNorm1d(n_hidden), Tanh(),\n  Linear(n_hidden, vocab_size),\n])\n\n# parameter init\nwith torch.no_grad():\n    model.layers[-1].weight *= 0.1 # last layer make less confident\n\nparameters = model.parameters()\nprint(sum(p.nelement() for p in parameters)) # number of parameters in total\nfor p in parameters:\n    p.requires_grad = True","metadata":{"execution":{"iopub.status.busy":"2024-07-07T08:48:31.755933Z","iopub.execute_input":"2024-07-07T08:48:31.756343Z","iopub.status.idle":"2024-07-07T08:48:31.766887Z","shell.execute_reply.started":"2024-07-07T08:48:31.756306Z","shell.execute_reply":"2024-07-07T08:48:31.765589Z"},"trusted":true},"execution_count":16,"outputs":[{"name":"stdout","text":"76117\n","output_type":"stream"}]},{"cell_type":"code","source":"max_steps = 200000\nbatch_size = 32\nlossi = []\n\nfor i in range(max_steps):\n  \n    # minibatch construct\n    ix = torch.randint(0, Xtr.shape[0], (batch_size,))\n    Xb, Yb = Xtr[ix], Ytr[ix] # batch X,Y\n\n    # forward pass\n    logits = model(Xb)\n    loss = F.cross_entropy(logits, Yb) # loss function\n\n    # backward pass\n    for p in parameters:\n        p.grad = None\n    loss.backward()\n\n    # update: simple SGD\n    lr = 0.1 if i < 150000 else 0.01 # step learning rate decay\n    for p in parameters:\n        p.data += -lr * p.grad\n\n    # track stats\n    if i % 10000 == 0: # print every once in a while\n        print(f'{i:7d}/{max_steps:7d}: {loss.item():.4f}')\n    lossi.append(loss.log10().item())","metadata":{"execution":{"iopub.status.busy":"2024-07-07T08:51:06.225889Z","iopub.execute_input":"2024-07-07T08:51:06.226384Z","iopub.status.idle":"2024-07-07T08:58:59.765758Z","shell.execute_reply.started":"2024-07-07T08:51:06.226355Z","shell.execute_reply":"2024-07-07T08:58:59.764563Z"},"trusted":true},"execution_count":18,"outputs":[{"name":"stdout","text":"      0/ 200000: 3.3742\n  10000/ 200000: 2.0858\n  20000/ 200000: 2.3773\n  30000/ 200000: 2.0374\n  40000/ 200000: 2.0565\n  50000/ 200000: 1.6778\n  60000/ 200000: 1.7729\n  70000/ 200000: 1.8532\n  80000/ 200000: 1.8671\n  90000/ 200000: 2.0691\n 100000/ 200000: 1.9204\n 110000/ 200000: 2.0599\n 120000/ 200000: 2.3327\n 130000/ 200000: 1.8239\n 140000/ 200000: 1.7739\n 150000/ 200000: 1.8054\n 160000/ 200000: 1.7186\n 170000/ 200000: 1.8768\n 180000/ 200000: 1.3099\n 190000/ 200000: 1.8889\n","output_type":"stream"}]},{"cell_type":"code","source":"plt.plot(torch.tensor(lossi).view(-1, 1000).mean(1))","metadata":{"execution":{"iopub.status.busy":"2024-07-07T08:58:59.767565Z","iopub.execute_input":"2024-07-07T08:58:59.767888Z","iopub.status.idle":"2024-07-07T08:59:00.041507Z","shell.execute_reply.started":"2024-07-07T08:58:59.767861Z","shell.execute_reply":"2024-07-07T08:59:00.040492Z"},"trusted":true},"execution_count":19,"outputs":[{"execution_count":19,"output_type":"execute_result","data":{"text/plain":"[<matplotlib.lines.Line2D at 0x7eb6a4577820>]"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 1 Axes>","image/png":""},"metadata":{}}]},{"cell_type":"code","source":"for layer in model.layers:\n    layer.training = False","metadata":{"execution":{"iopub.status.busy":"2024-07-07T08:59:00.042914Z","iopub.execute_input":"2024-07-07T08:59:00.043682Z","iopub.status.idle":"2024-07-07T08:59:00.048456Z","shell.execute_reply.started":"2024-07-07T08:59:00.043644Z","shell.execute_reply":"2024-07-07T08:59:00.047355Z"},"trusted":true},"execution_count":20,"outputs":[]},{"cell_type":"code","source":"@torch.no_grad() # this decorator disables gradient tracking inside pytorch\ndef split_loss(split):\n    x,y = {\n    'train': (Xtr, Ytr),\n    'val': (Xdev, Ydev),\n    'test': (Xte, Yte),\n    }[split]\n    logits = model(x)\n    loss = F.cross_entropy(logits, y)\n    print(split, loss.item())\n\nsplit_loss('train')\nsplit_loss('val')","metadata":{"execution":{"iopub.status.busy":"2024-07-07T08:59:00.050487Z","iopub.execute_input":"2024-07-07T08:59:00.050828Z","iopub.status.idle":"2024-07-07T08:59:06.527902Z","shell.execute_reply.started":"2024-07-07T08:59:00.050800Z","shell.execute_reply":"2024-07-07T08:59:06.526893Z"},"trusted":true},"execution_count":21,"outputs":[{"name":"stdout","text":"train 1.7076220512390137\nval 1.7621022462844849\n","output_type":"stream"}]},{"cell_type":"code","source":"g = torch.Generator().manual_seed(420)\nfor _ in range(20):\n    \n    out = []\n    context = [2] * block_size # initialize with all ...\n    while True:\n        # forward pass the neural net\n        logits = model(torch.tensor([context]))\n        probs = F.softmax(logits, dim=1)\n        # sample from the distribution\n        ix = torch.multinomial(probs, num_samples=1, generator=g).item()\n        # shift the context window and track the samples\n        context = context[1:] + [ix]\n        out.append(ix)\n        # if we sample the special '.' token, break\n        if ix == 2:\n            break\n    \n    print(''.join(itos[i] for i in out))","metadata":{"execution":{"iopub.status.busy":"2024-07-07T09:08:34.236964Z","iopub.execute_input":"2024-07-07T09:08:34.237587Z","iopub.status.idle":"2024-07-07T09:08:34.318830Z","shell.execute_reply.started":"2024-07-07T09:08:34.237553Z","shell.execute_reply":"2024-07-07T09:08:34.317895Z"},"trusted":true},"execution_count":24,"outputs":[{"name":"stdout","text":"jaselan.\nraca.\nprasanthan.\naridharshank.\nthugesh.\necaantar.\nshithakshikh.\njeevakur.\nhardvai.\nnirooshana.\neasitha.\nvaisodhan.\nnalagi.\numak.\npavanyaa.\nbhavith.\nyathurshanan.\nbalberren.\namridai.\nnaiyankaradhak.\n","output_type":"stream"}]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]}]}