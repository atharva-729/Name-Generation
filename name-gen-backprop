{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":1098288,"sourceType":"datasetVersion","datasetId":613951}],"dockerImageVersionId":30732,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","execution":{"iopub.status.busy":"2024-07-07T07:15:55.322616Z","iopub.execute_input":"2024-07-07T07:15:55.323142Z","iopub.status.idle":"2024-07-07T07:15:56.652424Z","shell.execute_reply.started":"2024-07-07T07:15:55.323099Z","shell.execute_reply":"2024-07-07T07:15:56.651067Z"},"trusted":true},"execution_count":1,"outputs":[{"name":"stdout","text":"/kaggle/input/indian-names-boys-girls/Names.txt\n","output_type":"stream"}]},{"cell_type":"code","source":"import torch\nimport torch.nn.functional as F\nimport matplotlib.pyplot as plt","metadata":{"execution":{"iopub.status.busy":"2024-07-07T07:38:40.295941Z","iopub.execute_input":"2024-07-07T07:38:40.296571Z","iopub.status.idle":"2024-07-07T07:38:43.845711Z","shell.execute_reply.started":"2024-07-07T07:38:40.296537Z","shell.execute_reply":"2024-07-07T07:38:43.844492Z"},"trusted":true},"execution_count":2,"outputs":[]},{"cell_type":"code","source":"with open(\"/kaggle/input/indian-names-boys-girls/Names.txt\", \"r\") as f:\n    names = f.read()\nnames = names.splitlines()\nnames[:5]","metadata":{"execution":{"iopub.status.busy":"2024-07-07T07:38:47.016361Z","iopub.execute_input":"2024-07-07T07:38:47.017044Z","iopub.status.idle":"2024-07-07T07:38:47.073204Z","shell.execute_reply.started":"2024-07-07T07:38:47.016994Z","shell.execute_reply":"2024-07-07T07:38:47.071612Z"},"trusted":true},"execution_count":3,"outputs":[{"execution_count":3,"output_type":"execute_result","data":{"text/plain":"['Aaban', 'Aabharan', 'Aabhas', 'Aabhat', 'Aabheer']"},"metadata":{}}]},{"cell_type":"code","source":"names = [n.lower() for n in names]","metadata":{"execution":{"iopub.status.busy":"2024-07-07T07:38:53.295751Z","iopub.execute_input":"2024-07-07T07:38:53.296940Z","iopub.status.idle":"2024-07-07T07:38:53.316069Z","shell.execute_reply.started":"2024-07-07T07:38:53.296850Z","shell.execute_reply":"2024-07-07T07:38:53.314245Z"},"trusted":true},"execution_count":4,"outputs":[]},{"cell_type":"code","source":"# encoding\nchars = sorted(list(set(\"\".join(names))))\nstoi = {s:i for i,s in enumerate(chars)}\nitos = {i:s for s, i in stoi.items()}\nvocab_size = len(itos)\nprint(itos)\nprint(vocab_size)","metadata":{"execution":{"iopub.status.busy":"2024-07-07T07:39:19.415825Z","iopub.execute_input":"2024-07-07T07:39:19.416370Z","iopub.status.idle":"2024-07-07T07:39:19.437006Z","shell.execute_reply.started":"2024-07-07T07:39:19.416330Z","shell.execute_reply":"2024-07-07T07:39:19.435364Z"},"trusted":true},"execution_count":5,"outputs":[{"name":"stdout","text":"{0: ' ', 1: '-', 2: '.', 3: 'a', 4: 'b', 5: 'c', 6: 'd', 7: 'e', 8: 'f', 9: 'g', 10: 'h', 11: 'i', 12: 'j', 13: 'k', 14: 'l', 15: 'm', 16: 'n', 17: 'o', 18: 'p', 19: 'q', 20: 'r', 21: 's', 22: 't', 23: 'u', 24: 'v', 25: 'w', 26: 'x', 27: 'y', 28: 'z'}\n29\n","output_type":"stream"}]},{"cell_type":"code","source":"block_size = 3 \n\ndef build_dataset(names):  \n    X, Y = [], []\n\n    for w in names:\n        context = [2] * block_size\n        for ch in w + '.':\n            ix = stoi[ch]\n            X.append(context)\n            Y.append(ix)\n            context = context[1:] + [ix] # crop and append\n\n    X = torch.tensor(X)\n    Y = torch.tensor(Y)\n    print(X.shape, Y.shape)\n    return X, Y\n\nimport random\nrandom.seed(42)\nrandom.shuffle(names)\nn1 = int(0.8*len(names))\nn2 = int(0.9*len(names))\n\nXtr,  Ytr  = build_dataset(names[:n1])  \nXdev, Ydev = build_dataset(names[n1:n2])\nXte,  Yte  = build_dataset(names[n2:]) ","metadata":{"execution":{"iopub.status.busy":"2024-07-07T07:39:31.377295Z","iopub.execute_input":"2024-07-07T07:39:31.378499Z","iopub.status.idle":"2024-07-07T07:39:33.596351Z","shell.execute_reply.started":"2024-07-07T07:39:31.378440Z","shell.execute_reply":"2024-07-07T07:39:33.595075Z"},"trusted":true},"execution_count":6,"outputs":[{"name":"stdout","text":"torch.Size([405025, 3]) torch.Size([405025])\ntorch.Size([50669, 3]) torch.Size([50669])\ntorch.Size([50685, 3]) torch.Size([50685])\n","output_type":"stream"}]},{"cell_type":"code","source":"def cmp(s, dt, t):\n    ex = torch.all(dt == t.grad).item()\n    app = torch.allclose(dt, t.grad)\n    maxdiff = (dt - t.grad).abs().max().item()\n    print(f'{s:15s} | exact: {str(ex):5s} | approximate: {str(app):5s} | maxdiff: {maxdiff}')","metadata":{"execution":{"iopub.status.busy":"2024-07-07T07:41:50.015765Z","iopub.execute_input":"2024-07-07T07:41:50.016214Z","iopub.status.idle":"2024-07-07T07:41:50.024765Z","shell.execute_reply.started":"2024-07-07T07:41:50.016183Z","shell.execute_reply":"2024-07-07T07:41:50.023034Z"},"trusted":true},"execution_count":7,"outputs":[]},{"cell_type":"code","source":"n_embd = 10 # the dimensionality of the character embedding vectors\nn_hidden = 64 # the number of neurons in the hidden layer of the MLP\n\ng = torch.Generator().manual_seed(2147483647) # for reproducibility\nC  = torch.randn((vocab_size, n_embd),            generator=g)\n# Layer 1\nW1 = torch.randn((n_embd * block_size, n_hidden), generator=g) * (5/3)/((n_embd * block_size)**0.5)\nb1 = torch.randn(n_hidden,                        generator=g) * 0.1 # using b1 just for fun, it's useless because of BN\n# Layer 2\nW2 = torch.randn((n_hidden, vocab_size),          generator=g) * 0.1\nb2 = torch.randn(vocab_size,                      generator=g) * 0.1\n# BatchNorm parameters\nbngain = torch.randn((1, n_hidden))*0.1 + 1.0\nbnbias = torch.randn((1, n_hidden))*0.1\n\nparameters = [C, W1, b1, W2, b2, bngain, bnbias]\nprint(sum(p.nelement() for p in parameters)) # number of parameters in total\nfor p in parameters:\n    p.requires_grad = True","metadata":{"execution":{"iopub.status.busy":"2024-07-07T07:42:16.975501Z","iopub.execute_input":"2024-07-07T07:42:16.975933Z","iopub.status.idle":"2024-07-07T07:42:17.037971Z","shell.execute_reply.started":"2024-07-07T07:42:16.975899Z","shell.execute_reply":"2024-07-07T07:42:17.036369Z"},"trusted":true},"execution_count":8,"outputs":[{"name":"stdout","text":"4287\n","output_type":"stream"}]},{"cell_type":"code","source":"batch_size = 32\nn = batch_size # a shorter variable also, for convenience\n# construct a minibatch\nix = torch.randint(0, Xtr.shape[0], (batch_size,), generator=g)\nXb, Yb = Xtr[ix], Ytr[ix]","metadata":{"execution":{"iopub.status.busy":"2024-07-07T07:42:28.656195Z","iopub.execute_input":"2024-07-07T07:42:28.656676Z","iopub.status.idle":"2024-07-07T07:42:28.681115Z","shell.execute_reply.started":"2024-07-07T07:42:28.656639Z","shell.execute_reply":"2024-07-07T07:42:28.679001Z"},"trusted":true},"execution_count":9,"outputs":[]},{"cell_type":"code","source":"# forward pass\n\nemb = C[Xb] # embed the characters into vectors\nembcat = emb.view(emb.shape[0], -1) # concatenate the vectors\n# Linear layer 1\nhprebn = embcat @ W1 + b1 # hidden layer pre-activation\n# BatchNorm layer\nbnmeani = 1/n*hprebn.sum(0, keepdim=True)\nbndiff = hprebn - bnmeani\nbndiff2 = bndiff**2\nbnvar = 1/(n-1)*(bndiff2).sum(0, keepdim=True) # note: Bessel's correction (dividing by n-1, not n)\nbnvar_inv = (bnvar + 1e-5)**-0.5\nbnraw = bndiff * bnvar_inv\nhpreact = bngain * bnraw + bnbias\n# Non-linearity\nh = torch.tanh(hpreact) # hidden layer\n# Linear layer 2\nlogits = h @ W2 + b2 # output layer\n# cross entropy loss (same as F.cross_entropy(logits, Yb))\nlogit_maxes = logits.max(1, keepdim=True).values\nnorm_logits = logits - logit_maxes # subtract max for numerical stability\ncounts = norm_logits.exp()\ncounts_sum = counts.sum(1, keepdims=True)\ncounts_sum_inv = counts_sum**-1 # if I use (1.0 / counts_sum) instead then I can't get backprop to be bit exact...\nprobs = counts * counts_sum_inv\nlogprobs = probs.log()\nloss = -logprobs[range(n), Yb].mean()\n\n# PyTorch backward pass\nfor p in parameters:\n    p.grad = None\nfor t in [logprobs, probs, counts, counts_sum, counts_sum_inv, # afaik there is no cleaner way\n          norm_logits, logit_maxes, logits, h, hpreact, bnraw,\n         bnvar_inv, bnvar, bndiff2, bndiff, hprebn, bnmeani,\n         embcat, emb]:\n    t.retain_grad()\nloss.backward()\nloss","metadata":{"execution":{"iopub.status.busy":"2024-07-07T07:43:04.077014Z","iopub.execute_input":"2024-07-07T07:43:04.078392Z","iopub.status.idle":"2024-07-07T07:43:04.210662Z","shell.execute_reply.started":"2024-07-07T07:43:04.078341Z","shell.execute_reply":"2024-07-07T07:43:04.209197Z"},"trusted":true},"execution_count":10,"outputs":[{"execution_count":10,"output_type":"execute_result","data":{"text/plain":"tensor(3.3988, grad_fn=<NegBackward0>)"},"metadata":{}}]},{"cell_type":"code","source":"# Exercise 1: backprop through the whole thing manually, \n# backpropagating through exactly all of the variables \n# as they are defined in the forward pass above, one by one\n\ndlogprobs = torch.zeros_like(logprobs)\ndlogprobs[range(n), Yb] = -1.0/n\ndprobs = (1.0 / probs) * dlogprobs\ndcounts_sum_inv = (counts * dprobs).sum(1, keepdim=True)\ndcounts = counts_sum_inv * dprobs\ndcounts_sum = (-counts_sum**-2) * dcounts_sum_inv\ndcounts += torch.ones_like(counts) * dcounts_sum\ndnorm_logits = counts * dcounts\ndlogits = dnorm_logits.clone()\ndlogit_maxes = (-dnorm_logits).sum(1, keepdim=True)\ndlogits += F.one_hot(logits.max(1).indices, num_classes=logits.shape[1]) * dlogit_maxes\ndh = dlogits @ W2.T\ndW2 = h.T @ dlogits\ndb2 = dlogits.sum(0)\ndhpreact = (1.0 - h**2) * dh\ndbngain = (bnraw * dhpreact).sum(0, keepdim=True)\ndbnraw = bngain * dhpreact\ndbnbias = dhpreact.sum(0, keepdim=True)\ndbndiff = bnvar_inv * dbnraw\ndbnvar_inv = (bndiff * dbnraw).sum(0, keepdim=True)\ndbnvar = (-0.5*(bnvar + 1e-5)**-1.5) * dbnvar_inv\ndbndiff2 = (1.0/(n-1))*torch.ones_like(bndiff2) * dbnvar\ndbndiff += (2*bndiff) * dbndiff2\ndhprebn = dbndiff.clone()\ndbnmeani = (-dbndiff).sum(0)\ndhprebn += 1.0/n * (torch.ones_like(hprebn) * dbnmeani)\ndembcat = dhprebn @ W1.T\ndW1 = embcat.T @ dhprebn\ndb1 = dhprebn.sum(0)\ndemb = dembcat.view(emb.shape)\ndC = torch.zeros_like(C)\nfor k in range(Xb.shape[0]):\n    for j in range(Xb.shape[1]):\n        ix = Xb[k,j]\n        dC[ix] += demb[k,j]\n    \ncmp('logprobs', dlogprobs, logprobs)\ncmp('probs', dprobs, probs)\ncmp('counts_sum_inv', dcounts_sum_inv, counts_sum_inv)\ncmp('counts_sum', dcounts_sum, counts_sum)\ncmp('counts', dcounts, counts)\ncmp('norm_logits', dnorm_logits, norm_logits)\ncmp('logit_maxes', dlogit_maxes, logit_maxes)\ncmp('logits', dlogits, logits)\ncmp('h', dh, h)\ncmp('W2', dW2, W2)\ncmp('b2', db2, b2)\ncmp('hpreact', dhpreact, hpreact)\ncmp('bngain', dbngain, bngain)\ncmp('bnbias', dbnbias, bnbias)\ncmp('bnraw', dbnraw, bnraw)\ncmp('bnvar_inv', dbnvar_inv, bnvar_inv)\ncmp('bnvar', dbnvar, bnvar)\ncmp('bndiff2', dbndiff2, bndiff2)\ncmp('bndiff', dbndiff, bndiff)\ncmp('bnmeani', dbnmeani, bnmeani)\ncmp('hprebn', dhprebn, hprebn)\ncmp('embcat', dembcat, embcat)\ncmp('W1', dW1, W1)\ncmp('b1', db1, b1)\ncmp('emb', demb, emb)\ncmp('C', dC, C)","metadata":{"execution":{"iopub.status.busy":"2024-07-07T07:43:57.346184Z","iopub.execute_input":"2024-07-07T07:43:57.347400Z","iopub.status.idle":"2024-07-07T07:43:57.397000Z","shell.execute_reply.started":"2024-07-07T07:43:57.347352Z","shell.execute_reply":"2024-07-07T07:43:57.395662Z"},"trusted":true},"execution_count":11,"outputs":[{"name":"stdout","text":"logprobs        | exact: True  | approximate: True  | maxdiff: 0.0\nprobs           | exact: True  | approximate: True  | maxdiff: 0.0\ncounts_sum_inv  | exact: True  | approximate: True  | maxdiff: 0.0\ncounts_sum      | exact: True  | approximate: True  | maxdiff: 0.0\ncounts          | exact: True  | approximate: True  | maxdiff: 0.0\nnorm_logits     | exact: True  | approximate: True  | maxdiff: 0.0\nlogit_maxes     | exact: True  | approximate: True  | maxdiff: 0.0\nlogits          | exact: True  | approximate: True  | maxdiff: 0.0\nh               | exact: True  | approximate: True  | maxdiff: 0.0\nW2              | exact: True  | approximate: True  | maxdiff: 0.0\nb2              | exact: True  | approximate: True  | maxdiff: 0.0\nhpreact         | exact: False | approximate: True  | maxdiff: 4.656612873077393e-10\nbngain          | exact: False | approximate: True  | maxdiff: 1.862645149230957e-09\nbnbias          | exact: False | approximate: True  | maxdiff: 1.862645149230957e-09\nbnraw           | exact: False | approximate: True  | maxdiff: 9.313225746154785e-10\nbnvar_inv       | exact: False | approximate: True  | maxdiff: 3.725290298461914e-09\nbnvar           | exact: False | approximate: True  | maxdiff: 6.984919309616089e-10\nbndiff2         | exact: False | approximate: True  | maxdiff: 2.546585164964199e-11\nbndiff          | exact: False | approximate: True  | maxdiff: 4.656612873077393e-10\nbnmeani         | exact: False | approximate: True  | maxdiff: 1.862645149230957e-09\nhprebn          | exact: False | approximate: True  | maxdiff: 4.656612873077393e-10\nembcat          | exact: False | approximate: True  | maxdiff: 1.1641532182693481e-09\nW1              | exact: False | approximate: True  | maxdiff: 5.587935447692871e-09\nb1              | exact: False | approximate: True  | maxdiff: 3.958120942115784e-09\nemb             | exact: False | approximate: True  | maxdiff: 1.1641532182693481e-09\nC               | exact: False | approximate: True  | maxdiff: 5.122274160385132e-09\n","output_type":"stream"}]},{"cell_type":"code","source":"# Exercise 2: backprop through cross_entropy but all in one go\n# to complete this challenge look at the mathematical expression of the loss,\n# take the derivative, simplify the expression, and just write it out\n\n# forward pass\n\n# before:\n# logit_maxes = logits.max(1, keepdim=True).values\n# norm_logits = logits - logit_maxes # subtract max for numerical stability\n# counts = norm_logits.exp()\n# counts_sum = counts.sum(1, keepdims=True)\n# counts_sum_inv = counts_sum**-1 # if I use (1.0 / counts_sum) instead then I can't get backprop to be bit exact...\n# probs = counts * counts_sum_inv\n# logprobs = probs.log()\n# loss = -logprobs[range(n), Yb].mean()\n\n# now:\nloss_fast = F.cross_entropy(logits, Yb)\nprint(loss_fast.item(), 'diff:', (loss_fast - loss).item())","metadata":{"execution":{"iopub.status.busy":"2024-07-07T07:44:46.178744Z","iopub.execute_input":"2024-07-07T07:44:46.179209Z","iopub.status.idle":"2024-07-07T07:44:46.190605Z","shell.execute_reply.started":"2024-07-07T07:44:46.179166Z","shell.execute_reply":"2024-07-07T07:44:46.188965Z"},"trusted":true},"execution_count":12,"outputs":[{"name":"stdout","text":"3.398815631866455 diff: 0.0\n","output_type":"stream"}]},{"cell_type":"code","source":"# backward pass\n\ndlogits = F.softmax(logits, 1)\ndlogits[range(n), Yb] -= 1\ndlogits /= n\n\ncmp('logits', dlogits, logits)","metadata":{"execution":{"iopub.status.busy":"2024-07-07T07:45:00.416910Z","iopub.execute_input":"2024-07-07T07:45:00.417369Z","iopub.status.idle":"2024-07-07T07:45:00.429668Z","shell.execute_reply.started":"2024-07-07T07:45:00.417332Z","shell.execute_reply":"2024-07-07T07:45:00.427962Z"},"trusted":true},"execution_count":13,"outputs":[{"name":"stdout","text":"logits          | exact: False | approximate: True  | maxdiff: 5.820766091346741e-09\n","output_type":"stream"}]},{"cell_type":"code","source":"logits.shape, Yb.shape","metadata":{"execution":{"iopub.status.busy":"2024-07-07T07:45:09.256081Z","iopub.execute_input":"2024-07-07T07:45:09.256950Z","iopub.status.idle":"2024-07-07T07:45:09.273999Z","shell.execute_reply.started":"2024-07-07T07:45:09.256908Z","shell.execute_reply":"2024-07-07T07:45:09.272446Z"},"trusted":true},"execution_count":14,"outputs":[{"execution_count":14,"output_type":"execute_result","data":{"text/plain":"(torch.Size([32, 29]), torch.Size([32]))"},"metadata":{}}]},{"cell_type":"code","source":"plt.figure(figsize=(4, 4))\nplt.imshow(dlogits.detach(), cmap='gray')","metadata":{"execution":{"iopub.status.busy":"2024-07-07T07:46:17.180773Z","iopub.execute_input":"2024-07-07T07:46:17.181842Z","iopub.status.idle":"2024-07-07T07:46:17.495923Z","shell.execute_reply.started":"2024-07-07T07:46:17.181796Z","shell.execute_reply":"2024-07-07T07:46:17.494520Z"},"trusted":true},"execution_count":15,"outputs":[{"execution_count":15,"output_type":"execute_result","data":{"text/plain":"<matplotlib.image.AxesImage at 0x796b686235b0>"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<Figure size 400x400 with 1 Axes>","image/png":"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"},"metadata":{}}]},{"cell_type":"code","source":"# Exercise 3: backprop through batchnorm but all in one go\n# to complete this challenge look at the mathematical expression of the output of batchnorm,\n# take the derivative w.r.t. its input, simplify the expression, and just write it out\n\n# forward pass\n\n# before:\n# bnmeani = 1/n*hprebn.sum(0, keepdim=True)\n# bndiff = hprebn - bnmeani\n# bndiff2 = bndiff**2\n# bnvar = 1/(n-1)*(bndiff2).sum(0, keepdim=True) # note: Bessel's correction (dividing by n-1, not n)\n# bnvar_inv = (bnvar + 1e-5)**-0.5\n# bnraw = bndiff * bnvar_inv\n# hpreact = bngain * bnraw + bnbias\n\n# now:\nhpreact_fast = bngain * (hprebn - hprebn.mean(0, keepdim=True)) / torch.sqrt(hprebn.var(0, keepdim=True, unbiased=True) + 1e-5) + bnbias\nprint('max diff:', (hpreact_fast - hpreact).abs().max())","metadata":{"execution":{"iopub.status.busy":"2024-07-07T07:46:43.857009Z","iopub.execute_input":"2024-07-07T07:46:43.857687Z","iopub.status.idle":"2024-07-07T07:46:43.875506Z","shell.execute_reply.started":"2024-07-07T07:46:43.857643Z","shell.execute_reply":"2024-07-07T07:46:43.874046Z"},"trusted":true},"execution_count":16,"outputs":[{"name":"stdout","text":"max diff: tensor(4.7684e-07, grad_fn=<MaxBackward1>)\n","output_type":"stream"}]},{"cell_type":"code","source":"# backward pass\n\n# before we had:\n# dbnraw = bngain * dhpreact\n# dbndiff = bnvar_inv * dbnraw\n# dbnvar_inv = (bndiff * dbnraw).sum(0, keepdim=True)\n# dbnvar = (-0.5*(bnvar + 1e-5)**-1.5) * dbnvar_inv\n# dbndiff2 = (1.0/(n-1))*torch.ones_like(bndiff2) * dbnvar\n# dbndiff += (2*bndiff) * dbndiff2\n# dhprebn = dbndiff.clone()\n# dbnmeani = (-dbndiff).sum(0)\n# dhprebn += 1.0/n * (torch.ones_like(hprebn) * dbnmeani)\n\n# calculate dhprebn given dhpreact (i.e. backprop through the batchnorm)\n# (you'll also need to use some of the variables from the forward pass up above)\n\ndhprebn = bngain*bnvar_inv/n * (n*dhpreact - dhpreact.sum(0) - n/(n-1)*bnraw*(dhpreact*bnraw).sum(0))\n\ncmp('hprebn', dhprebn, hprebn)","metadata":{"execution":{"iopub.status.busy":"2024-07-07T07:46:55.176754Z","iopub.execute_input":"2024-07-07T07:46:55.177508Z","iopub.status.idle":"2024-07-07T07:46:55.188927Z","shell.execute_reply.started":"2024-07-07T07:46:55.177446Z","shell.execute_reply":"2024-07-07T07:46:55.186959Z"},"trusted":true},"execution_count":17,"outputs":[{"name":"stdout","text":"hprebn          | exact: False | approximate: True  | maxdiff: 9.313225746154785e-10\n","output_type":"stream"}]},{"cell_type":"code","source":"# Exercise 4: putting it all together!\n# Train the MLP neural net with your own backward pass\n\n# init\nn_embd = 10 # the dimensionality of the character embedding vectors\nn_hidden = 200 # the number of neurons in the hidden layer of the MLP\n\ng = torch.Generator().manual_seed(2147483647) # for reproducibility\nC  = torch.randn((vocab_size, n_embd),            generator=g)\n# Layer 1\nW1 = torch.randn((n_embd * block_size, n_hidden), generator=g) * (5/3)/((n_embd * block_size)**0.5)\nb1 = torch.randn(n_hidden,                        generator=g) * 0.1\n# Layer 2\nW2 = torch.randn((n_hidden, vocab_size),          generator=g) * 0.1\nb2 = torch.randn(vocab_size,                      generator=g) * 0.1\n# BatchNorm parameters\nbngain = torch.randn((1, n_hidden))*0.1 + 1.0\nbnbias = torch.randn((1, n_hidden))*0.1\n\nparameters = [C, W1, b1, W2, b2, bngain, bnbias]\nprint(sum(p.nelement() for p in parameters)) # number of parameters in total\nfor p in parameters:\n    p.requires_grad = True\n\n# same optimization as last time\nmax_steps = 200000\nbatch_size = 32\nn = batch_size # convenience\nlossi = []\n\n# use this context manager for efficiency once your backward pass is written (TODO)\nwith torch.no_grad():\n\n    # kick off optimization\n    for i in range(max_steps):\n  \n      # minibatch construct\n        ix = torch.randint(0, Xtr.shape[0], (batch_size,), generator=g)\n        Xb, Yb = Xtr[ix], Ytr[ix] # batch X,Y\n    \n        # forward pass\n        emb = C[Xb] # embed the characters into vectors\n        embcat = emb.view(emb.shape[0], -1) # concatenate the vectors\n        # Linear layer\n        hprebn = embcat @ W1 + b1 # hidden layer pre-activation\n        # BatchNorm layer\n        # -------------------------------------------------------------\n        bnmean = hprebn.mean(0, keepdim=True)\n        bnvar = hprebn.var(0, keepdim=True, unbiased=True)\n        bnvar_inv = (bnvar + 1e-5)**-0.5\n        bnraw = (hprebn - bnmean) * bnvar_inv\n        hpreact = bngain * bnraw + bnbias\n      # -------------------------------------------------------------\n        # Non-linearity\n        h = torch.tanh(hpreact) # hidden layer\n        logits = h @ W2 + b2 # output layer\n        loss = F.cross_entropy(logits, Yb) # loss function\n    \n          # backward pass\n        for p in parameters:\n            p.grad = None\n          #loss.backward() # use this for correctness comparisons, delete it later!\n      \n        # manual backprop! #swole_doge_meme\n        # -----------------\n        dlogits = F.softmax(logits, 1)\n        dlogits[range(n), Yb] -= 1\n        dlogits /= n\n        # 2nd layer backprop\n        dh = dlogits @ W2.T\n        dW2 = h.T @ dlogits\n        db2 = dlogits.sum(0)\n        # tanh\n        dhpreact = (1.0 - h**2) * dh\n        # batchnorm backprop\n        dbngain = (bnraw * dhpreact).sum(0, keepdim=True)\n        dbnbias = dhpreact.sum(0, keepdim=True)\n        dhprebn = bngain*bnvar_inv/n * (n*dhpreact - dhpreact.sum(0) - n/(n-1)*bnraw*(dhpreact*bnraw).sum(0))\n        # 1st layer\n        dembcat = dhprebn @ W1.T\n        dW1 = embcat.T @ dhprebn\n        db1 = dhprebn.sum(0)\n        # embedding\n        demb = dembcat.view(emb.shape)\n        dC = torch.zeros_like(C)\n        for k in range(Xb.shape[0]):\n            for j in range(Xb.shape[1]):\n                ix = Xb[k,j]\n                dC[ix] += demb[k,j]\n        grads = [dC, dW1, db1, dW2, db2, dbngain, dbnbias]\n    # -----------------\n\n    # update\n        lr = 0.1 if i < 100000 else 0.01 # step learning rate decay\n        for p, grad in zip(parameters, grads):\n            #p.data += -lr * p.grad # old way of cheems doge (using PyTorch grad from .backward())\n            p.data += -lr * grad # new way of swole doge TODO: enable\n\n    # track stats\n        if i % 10000 == 0: # print every once in a while\n            print(f'{i:7d}/{max_steps:7d}: {loss.item():.4f}')\n        lossi.append(loss.log10().item())","metadata":{"execution":{"iopub.status.busy":"2024-07-07T07:49:39.178534Z","iopub.execute_input":"2024-07-07T07:49:39.179046Z","iopub.status.idle":"2024-07-07T07:59:51.614928Z","shell.execute_reply.started":"2024-07-07T07:49:39.179010Z","shell.execute_reply":"2024-07-07T07:59:51.613567Z"},"trusted":true},"execution_count":18,"outputs":[{"name":"stdout","text":"12719\n      0/ 200000: 3.8915\n  10000/ 200000: 2.7516\n  20000/ 200000: 1.8658\n  30000/ 200000: 1.8640\n  40000/ 200000: 2.2406\n  50000/ 200000: 1.6918\n  60000/ 200000: 2.2501\n  70000/ 200000: 2.2756\n  80000/ 200000: 2.3108\n  90000/ 200000: 2.2493\n 100000/ 200000: 2.4911\n 110000/ 200000: 2.3150\n 120000/ 200000: 2.1648\n 130000/ 200000: 1.6910\n 140000/ 200000: 1.6386\n 150000/ 200000: 1.9566\n 160000/ 200000: 2.0954\n 170000/ 200000: 1.9859\n 180000/ 200000: 1.5845\n 190000/ 200000: 1.8943\n","output_type":"stream"}]},{"cell_type":"code","source":"with torch.no_grad():\n  # pass the training set through\n    emb = C[Xtr]\n    embcat = emb.view(emb.shape[0], -1)\n    hpreact = embcat @ W1 + b1\n    # measure the mean/std over the entire training set\n    bnmean = hpreact.mean(0, keepdim=True)\n    bnvar = hpreact.var(0, keepdim=True, unbiased=True)","metadata":{"execution":{"iopub.status.busy":"2024-07-07T07:59:51.617282Z","iopub.execute_input":"2024-07-07T07:59:51.617653Z","iopub.status.idle":"2024-07-07T07:59:52.790482Z","shell.execute_reply.started":"2024-07-07T07:59:51.617623Z","shell.execute_reply":"2024-07-07T07:59:52.788992Z"},"trusted":true},"execution_count":19,"outputs":[]},{"cell_type":"code","source":"@torch.no_grad() # this decorator disables gradient tracking\ndef split_loss(split):\n    x,y = {\n    'train': (Xtr, Ytr),\n    'val': (Xdev, Ydev),\n    'test': (Xte, Yte),\n    }[split]\n    emb = C[x] # (N, block_size, n_embd)\n    embcat = emb.view(emb.shape[0], -1) # concat into (N, block_size * n_embd)\n    hpreact = embcat @ W1 + b1\n    hpreact = bngain * (hpreact - bnmean) * (bnvar + 1e-5)**-0.5 + bnbias\n    h = torch.tanh(hpreact) # (N, n_hidden)\n    logits = h @ W2 + b2 # (N, vocab_size)\n    loss = F.cross_entropy(logits, y)\n    print(split, loss.item())\n\nsplit_loss('train')\nsplit_loss('val')","metadata":{"execution":{"iopub.status.busy":"2024-07-07T07:59:52.792056Z","iopub.execute_input":"2024-07-07T07:59:52.792515Z","iopub.status.idle":"2024-07-07T07:59:54.557298Z","shell.execute_reply.started":"2024-07-07T07:59:52.792485Z","shell.execute_reply":"2024-07-07T07:59:54.556163Z"},"trusted":true},"execution_count":20,"outputs":[{"name":"stdout","text":"train 1.918258547782898\nval 1.931188702583313\n","output_type":"stream"}]},{"cell_type":"code","source":"g = torch.Generator().manual_seed(24234)\n\nfor _ in range(20):\n    \n    out = []\n    context = [2] * block_size # initialize with all ...\n    while True:\n        # ------------\n        # forward pass:\n        # Embedding\n        emb = C[torch.tensor([context])] # (1,block_size,d)      \n        embcat = emb.view(emb.shape[0], -1) # concat into (N, block_size * n_embd)\n        hpreact = embcat @ W1 + b1\n        hpreact = bngain * (hpreact - bnmean) * (bnvar + 1e-5)**-0.5 + bnbias\n        h = torch.tanh(hpreact) # (N, n_hidden)\n        logits = h @ W2 + b2 # (N, vocab_size)\n        # ------------\n        # Sample\n        probs = F.softmax(logits, dim=1)\n        ix = torch.multinomial(probs, num_samples=1, generator=g).item()\n        context = context[1:] + [ix]\n        out.append(ix)\n        if ix == 2:\n            break\n    \n    print(''.join(itos[i] for i in out))","metadata":{"execution":{"iopub.status.busy":"2024-07-07T07:59:54.560021Z","iopub.execute_input":"2024-07-07T07:59:54.560360Z","iopub.status.idle":"2024-07-07T07:59:54.639498Z","shell.execute_reply.started":"2024-07-07T07:59:54.560331Z","shell.execute_reply":"2024-07-07T07:59:54.638194Z"},"trusted":true},"execution_count":21,"outputs":[{"name":"stdout","text":"krishika.\nhemeshkan.\ndaran.\nchanar.\nhem.\nyesh.\nahini.\njashyan.\nnishan.\nyutamudhitharsathurven.\nhamb.\ntaevishayarana.\npuran.\nnal.\nnimusshaneebanan.\nsadkumathi.\nhathi.\nshiya.\njayan.\njasshan.\n","output_type":"stream"}]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]}]}