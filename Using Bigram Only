{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":1098288,"sourceType":"datasetVersion","datasetId":613951}],"dockerImageVersionId":30732,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"raw","source":"","metadata":{}},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","execution":{"iopub.status.busy":"2024-07-02T10:47:30.909045Z","iopub.execute_input":"2024-07-02T10:47:30.909579Z","iopub.status.idle":"2024-07-02T10:47:32.197491Z","shell.execute_reply.started":"2024-07-02T10:47:30.909538Z","shell.execute_reply":"2024-07-02T10:47:32.196268Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"with open(\"/kaggle/input/indian-names-boys-girls/Names.txt\", \"r\") as f:\n    names = f.read()\nnames = names.splitlines()\nnames[:5]","metadata":{"execution":{"iopub.status.busy":"2024-07-02T10:47:32.199797Z","iopub.execute_input":"2024-07-02T10:47:32.200358Z","iopub.status.idle":"2024-07-02T10:47:32.235734Z","shell.execute_reply.started":"2024-07-02T10:47:32.200323Z","shell.execute_reply":"2024-07-02T10:47:32.234499Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"len(names)","metadata":{"execution":{"iopub.status.busy":"2024-07-02T10:47:32.237271Z","iopub.execute_input":"2024-07-02T10:47:32.237621Z","iopub.status.idle":"2024-07-02T10:47:32.247182Z","shell.execute_reply.started":"2024-07-02T10:47:32.237592Z","shell.execute_reply":"2024-07-02T10:47:32.245729Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"fr = {}\nfor n in names:\n    n = n.lower()\n    ch = [\".\"] + list(n) + [\".\"]\n    for ch1, ch2 in zip(ch, ch[1:]):\n        bigram = (ch1, ch2)\n        fr[bigram] = fr.get(bigram, 0) + 1","metadata":{"execution":{"iopub.status.busy":"2024-07-02T10:47:32.250360Z","iopub.execute_input":"2024-07-02T10:47:32.250731Z","iopub.status.idle":"2024-07-02T10:47:32.753231Z","shell.execute_reply.started":"2024-07-02T10:47:32.250700Z","shell.execute_reply":"2024-07-02T10:47:32.751854Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"sorted(fr.items(), key = lambda kv: -kv[1])[:5]","metadata":{"execution":{"iopub.status.busy":"2024-07-02T10:47:32.754973Z","iopub.execute_input":"2024-07-02T10:47:32.755417Z","iopub.status.idle":"2024-07-02T10:47:32.764109Z","shell.execute_reply.started":"2024-07-02T10:47:32.755375Z","shell.execute_reply":"2024-07-02T10:47:32.762833Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"names = [n.lower() for n in names]","metadata":{"execution":{"iopub.status.busy":"2024-07-02T10:47:32.766496Z","iopub.execute_input":"2024-07-02T10:47:32.767012Z","iopub.status.idle":"2024-07-02T10:47:32.801776Z","shell.execute_reply.started":"2024-07-02T10:47:32.766967Z","shell.execute_reply":"2024-07-02T10:47:32.800165Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# encoding\nchars = sorted(list(set(\"\".join(names))))\nstoi = {s:i for i,s in enumerate(chars)}\nitos = {i:s for s, i in stoi.items()}\nchars","metadata":{"execution":{"iopub.status.busy":"2024-07-02T10:47:32.804092Z","iopub.execute_input":"2024-07-02T10:47:32.804975Z","iopub.status.idle":"2024-07-02T10:47:32.838378Z","shell.execute_reply.started":"2024-07-02T10:47:32.804929Z","shell.execute_reply":"2024-07-02T10:47:32.837050Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"len(chars)","metadata":{"execution":{"iopub.status.busy":"2024-07-02T10:47:32.840673Z","iopub.execute_input":"2024-07-02T10:47:32.841601Z","iopub.status.idle":"2024-07-02T10:47:32.850945Z","shell.execute_reply.started":"2024-07-02T10:47:32.841555Z","shell.execute_reply":"2024-07-02T10:47:32.849042Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"import torch","metadata":{"execution":{"iopub.status.busy":"2024-07-02T10:47:32.854000Z","iopub.execute_input":"2024-07-02T10:47:32.855358Z","iopub.status.idle":"2024-07-02T10:47:36.911524Z","shell.execute_reply.started":"2024-07-02T10:47:32.855301Z","shell.execute_reply":"2024-07-02T10:47:36.910335Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"N = torch.zeros((29,29), dtype=torch.int32)","metadata":{"execution":{"iopub.status.busy":"2024-07-02T10:47:36.913585Z","iopub.execute_input":"2024-07-02T10:47:36.914555Z","iopub.status.idle":"2024-07-02T10:47:36.935876Z","shell.execute_reply.started":"2024-07-02T10:47:36.914516Z","shell.execute_reply":"2024-07-02T10:47:36.934274Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"names[:5]","metadata":{"execution":{"iopub.status.busy":"2024-07-02T10:47:36.941448Z","iopub.execute_input":"2024-07-02T10:47:36.941927Z","iopub.status.idle":"2024-07-02T10:47:36.949793Z","shell.execute_reply.started":"2024-07-02T10:47:36.941893Z","shell.execute_reply":"2024-07-02T10:47:36.948329Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"for n in names","metadata":{"execution":{"iopub.status.busy":"2024-07-02T10:47:36.951368Z","iopub.execute_input":"2024-07-02T10:47:36.951734Z","iopub.status.idle":"2024-07-02T10:47:36.961794Z","shell.execute_reply.started":"2024-07-02T10:47:36.951693Z","shell.execute_reply":"2024-07-02T10:47:36.960140Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"pp = names[0]","metadata":{"execution":{"iopub.status.busy":"2024-07-02T10:47:36.962697Z","iopub.status.idle":"2024-07-02T10:47:36.963192Z","shell.execute_reply.started":"2024-07-02T10:47:36.962974Z","shell.execute_reply":"2024-07-02T10:47:36.962993Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"pp = \"n\" + pp + \"h\"\npp","metadata":{"execution":{"iopub.status.busy":"2024-07-02T10:47:36.965298Z","iopub.status.idle":"2024-07-02T10:47:36.965984Z","shell.execute_reply.started":"2024-07-02T10:47:36.965724Z","shell.execute_reply":"2024-07-02T10:47:36.965743Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"for ch1, ch2 in fr.keys():\n    N[stoi[ch1], stoi[ch2]] = fr[(ch1, ch2)]","metadata":{"execution":{"iopub.status.busy":"2024-07-02T10:47:36.967907Z","iopub.status.idle":"2024-07-02T10:47:36.968338Z","shell.execute_reply.started":"2024-07-02T10:47:36.968128Z","shell.execute_reply":"2024-07-02T10:47:36.968146Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\nplt.figure(figsize=(16,16))\nplt.imshow(N, cmap='Greens')\nfor i in range(29):\n    for j in range(29):\n        chstr = itos[i] + itos[j]\n        plt.text(j, i, chstr, ha=\"center\", va=\"bottom\", color='navy')\n        plt.text(j, i, N[i, j].item(), ha=\"center\", va=\"top\", color='navy')\nplt.axis('off');","metadata":{"execution":{"iopub.status.busy":"2024-07-02T10:47:36.970105Z","iopub.status.idle":"2024-07-02T10:47:36.970521Z","shell.execute_reply.started":"2024-07-02T10:47:36.970321Z","shell.execute_reply":"2024-07-02T10:47:36.970339Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"N[0]","metadata":{"execution":{"iopub.status.busy":"2024-07-02T10:47:36.971894Z","iopub.status.idle":"2024-07-02T10:47:36.972300Z","shell.execute_reply.started":"2024-07-02T10:47:36.972105Z","shell.execute_reply":"2024-07-02T10:47:36.972121Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# multinomial\np = N[0].float()\np = p/p.sum()\np","metadata":{"execution":{"iopub.status.busy":"2024-07-02T10:47:36.974432Z","iopub.status.idle":"2024-07-02T10:47:36.974879Z","shell.execute_reply.started":"2024-07-02T10:47:36.974642Z","shell.execute_reply":"2024-07-02T10:47:36.974658Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"g = torch.Generator().manual_seed(42)\np = torch.rand(3, generator=g)\np = p / p.sum()\np","metadata":{"execution":{"iopub.status.busy":"2024-07-02T10:47:36.976856Z","iopub.status.idle":"2024-07-02T10:47:36.977258Z","shell.execute_reply.started":"2024-07-02T10:47:36.977060Z","shell.execute_reply":"2024-07-02T10:47:36.977079Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# smoothing and handling for broadcasting\nP = (N+1).float()\nP /= P.sum(1, keepdims=True)","metadata":{"execution":{"iopub.status.busy":"2024-07-02T10:47:36.979005Z","iopub.status.idle":"2024-07-02T10:47:36.979406Z","shell.execute_reply.started":"2024-07-02T10:47:36.979208Z","shell.execute_reply":"2024-07-02T10:47:36.979224Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"g = torch.Generator().manual_seed(42)\n\nfor i in range(20):\n  \n    out = []\n    ix = 0\n    while True:\n        p = P[ix]\n        ix = torch.multinomial(p, num_samples=1, replacement=True, generator=g).item()\n        out.append(itos[ix])\n        if ix == 2:\n            break\n    print(''.join(out))","metadata":{"execution":{"iopub.status.busy":"2024-07-02T10:47:36.981390Z","iopub.status.idle":"2024-07-02T10:47:36.981818Z","shell.execute_reply.started":"2024-07-02T10:47:36.981593Z","shell.execute_reply":"2024-07-02T10:47:36.981609Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# apply MLE\nlog_likelihood = 0.0\nn = 0\n\nfor name in names:\n# for name in [\"plooploo\"]:\n    word = ['.'] + list(name) + ['.']\n    for ch1, ch2 in zip(word, word[1:]):\n        ix1 = stoi[ch1]\n        ix2 = stoi[ch2]\n        prob = P[ix1, ix2]\n        logprob = torch.log(prob)\n        log_likelihood += logprob\n        n += 1\n\nprint(f\"negative log likelihood: {-log_likelihood/n}\")","metadata":{"execution":{"iopub.status.busy":"2024-07-02T10:47:36.985940Z","iopub.status.idle":"2024-07-02T10:47:36.986349Z","shell.execute_reply.started":"2024-07-02T10:47:36.986147Z","shell.execute_reply":"2024-07-02T10:47:36.986164Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"### same but with neyral network approach","metadata":{}},{"cell_type":"code","source":"# create the training set of bigrams (x,y)\nxs1, ys1 = [], []\n\nfor n in names[:1]:\n    chs = ['.'] + list(n) + ['.']\n    for ch1, ch2 in zip(chs, chs[1:]):\n        ix1 = stoi[ch1]\n        ix2 = stoi[ch2]\n        xs1.append(ix1)\n        ys1.append(ix2)\n\nxs = torch.tensor(xs1)\nys = torch.tensor(ys1)","metadata":{"execution":{"iopub.status.busy":"2024-07-02T11:15:46.460887Z","iopub.execute_input":"2024-07-02T11:15:46.461768Z","iopub.status.idle":"2024-07-02T11:15:46.473225Z","shell.execute_reply.started":"2024-07-02T11:15:46.461712Z","shell.execute_reply":"2024-07-02T11:15:46.471844Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"import torch.nn.functional as F\nxenc = F.one_hot(xs, num_classes=29).float()","metadata":{"execution":{"iopub.status.busy":"2024-07-02T11:15:47.778959Z","iopub.execute_input":"2024-07-02T11:15:47.780149Z","iopub.status.idle":"2024-07-02T11:15:47.786009Z","shell.execute_reply.started":"2024-07-02T11:15:47.780045Z","shell.execute_reply":"2024-07-02T11:15:47.784930Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"xenc.shape","metadata":{"execution":{"iopub.status.busy":"2024-07-02T11:15:49.618592Z","iopub.execute_input":"2024-07-02T11:15:49.619627Z","iopub.status.idle":"2024-07-02T11:15:49.626335Z","shell.execute_reply.started":"2024-07-02T11:15:49.619584Z","shell.execute_reply":"2024-07-02T11:15:49.625274Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"import matplotlib.pyplot as plt \nplt.imshow(xenc)","metadata":{"execution":{"iopub.status.busy":"2024-07-02T11:15:53.818541Z","iopub.execute_input":"2024-07-02T11:15:53.818959Z","iopub.status.idle":"2024-07-02T11:15:54.064536Z","shell.execute_reply.started":"2024-07-02T11:15:53.818926Z","shell.execute_reply":"2024-07-02T11:15:54.063234Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# will write for 29 neurons\nW = torch.randn((29, 29))\nxenc @ W","metadata":{"execution":{"iopub.status.busy":"2024-07-02T11:15:56.538588Z","iopub.execute_input":"2024-07-02T11:15:56.538990Z","iopub.status.idle":"2024-07-02T11:15:56.549423Z","shell.execute_reply.started":"2024-07-02T11:15:56.538960Z","shell.execute_reply":"2024-07-02T11:15:56.548231Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"logits = xenc @ W  # dot product: WX, normally districnuted log-counts\ncounts = logits.exp() # softmax\nprobs = counts / counts.sum(1, keepdims=True)\nprobs","metadata":{"execution":{"iopub.status.busy":"2024-07-02T11:16:04.659144Z","iopub.execute_input":"2024-07-02T11:16:04.660062Z","iopub.status.idle":"2024-07-02T11:16:04.670734Z","shell.execute_reply.started":"2024-07-02T11:16:04.660024Z","shell.execute_reply":"2024-07-02T11:16:04.669534Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"nlls = torch.zeros(6)\nfor i in range(6):\n    # i-th bigram:\n    x = xs[i].item() # input character index\n    y = ys[i].item() # label character index\n    print('--------')\n    print(f'bigram example {i+1}: {itos[x]}{itos[y]} (indexes {x},{y})')\n    print('input to the neural net:', x)\n    print('output probabilities from the neural net:', probs[i])\n    print('label (actual next character):', y)\n    p = probs[i, y]\n    print('probability assigned by the net to the the correct character:', p.item())\n    logp = torch.log(p)\n    print('log likelihood:', logp.item())\n    nll = -logp\n    print('negative log likelihood:', nll.item())\n    nlls[i] = nll\n\nprint('=========')\nprint('average negative log likelihood, i.e. loss =', nlls.mean().item())","metadata":{"execution":{"iopub.status.busy":"2024-07-02T11:16:08.309520Z","iopub.execute_input":"2024-07-02T11:16:08.310234Z","iopub.status.idle":"2024-07-02T11:16:08.326183Z","shell.execute_reply.started":"2024-07-02T11:16:08.310194Z","shell.execute_reply":"2024-07-02T11:16:08.324848Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"g = torch.Generator().manual_seed(42)\nW = torch.randn((29, 29), generator=g, requires_grad=True)","metadata":{"execution":{"iopub.status.busy":"2024-07-02T11:16:13.863745Z","iopub.execute_input":"2024-07-02T11:16:13.864154Z","iopub.status.idle":"2024-07-02T11:16:13.870707Z","shell.execute_reply.started":"2024-07-02T11:16:13.864117Z","shell.execute_reply":"2024-07-02T11:16:13.869410Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# forward pass\nxenc = F.one_hot(xs, num_classes=29).float() # input to the network: one-hot encoding\nlogits = xenc @ W # predict log-counts\ncounts = logits.exp() # counts, equivalent to N\nprobs = counts / counts.sum(1, keepdims=True) # probabilities for next character\nloss = -probs[torch.arange(6), ys].log().mean()","metadata":{"execution":{"iopub.status.busy":"2024-07-02T11:16:20.654167Z","iopub.execute_input":"2024-07-02T11:16:20.654574Z","iopub.status.idle":"2024-07-02T11:16:20.662294Z","shell.execute_reply.started":"2024-07-02T11:16:20.654541Z","shell.execute_reply":"2024-07-02T11:16:20.661029Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"loss","metadata":{"execution":{"iopub.status.busy":"2024-07-02T11:16:23.412564Z","iopub.execute_input":"2024-07-02T11:16:23.413323Z","iopub.status.idle":"2024-07-02T11:16:23.421572Z","shell.execute_reply.started":"2024-07-02T11:16:23.413288Z","shell.execute_reply":"2024-07-02T11:16:23.420305Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# backward pass\nW.grad = None # set to zero the gradient\nloss.backward()\nloss","metadata":{"execution":{"iopub.status.busy":"2024-07-02T11:16:25.818679Z","iopub.execute_input":"2024-07-02T11:16:25.819676Z","iopub.status.idle":"2024-07-02T11:16:25.828269Z","shell.execute_reply.started":"2024-07-02T11:16:25.819635Z","shell.execute_reply":"2024-07-02T11:16:25.827110Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# all of it\n# create the dataset\nxs1, ys1 = [], []\nfor w in names:\n    chs = ['.'] + list(w) + ['.']\n    for ch1, ch2 in zip(chs, chs[1:]):\n        ix1 = stoi[ch1]\n        ix2 = stoi[ch2]\n        xs1.append(ix1)\n        ys1.append(ix2)\nxs = torch.tensor(xs1)\nys = torch.tensor(ys1)\nnum = xs.nelement()\nprint('number of examples: ', num)\n\n# initialize the 'network'\ng = torch.Generator().manual_seed(42)\nW = torch.randn((29, 29), generator=g, requires_grad=True)","metadata":{"execution":{"iopub.status.busy":"2024-07-02T11:16:33.418791Z","iopub.execute_input":"2024-07-02T11:16:33.419223Z","iopub.status.idle":"2024-07-02T11:16:34.192643Z","shell.execute_reply.started":"2024-07-02T11:16:33.419184Z","shell.execute_reply":"2024-07-02T11:16:34.191527Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# gradient descent\nfor k in range(40):\n  \n    # forward pass\n    xenc = F.one_hot(xs, num_classes=29).float() # input to the network: one-hot encoding\n    logits = xenc @ W # predict log-counts\n    counts = logits.exp() # counts, equivalent to N\n    probs = counts / counts.sum(1, keepdims=True) # probabilities for next character\n    loss = -probs[torch.arange(num), ys].log().mean() + 0.01*(W**2).mean()\n    print(loss.item())\n\n    # backward pass\n    W.grad = None # set to zero the gradient\n    loss.backward()\n\n    # update\n    W.data += -50 * W.grad","metadata":{"execution":{"iopub.status.busy":"2024-07-02T11:17:01.458702Z","iopub.execute_input":"2024-07-02T11:17:01.459168Z","iopub.status.idle":"2024-07-02T11:17:10.662173Z","shell.execute_reply.started":"2024-07-02T11:17:01.459125Z","shell.execute_reply":"2024-07-02T11:17:10.660944Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"earlier this was, while starting, 3.8 something","metadata":{}},{"cell_type":"code","source":"g = torch.Generator().manual_seed(42)\nfor i in range(5):\n  \n    out = []\n    ix = 0\n    while True:\n        xenc = F.one_hot(torch.tensor([ix]), num_classes=29).float()\n        logits = xenc @ W # predict log-counts\n        counts = logits.exp() # counts, equivalent to N\n        p = counts / counts.sum(1, keepdims=True) # probabilities for next character\n        # ----------\n\n        ix = torch.multinomial(p, num_samples=1, replacement=True, generator=g).item()\n        out.append(itos[ix])\n        if ix == 2:\n            break\n    print(''.join(out))","metadata":{"execution":{"iopub.status.busy":"2024-07-02T11:17:16.699525Z","iopub.execute_input":"2024-07-02T11:17:16.699954Z","iopub.status.idle":"2024-07-02T11:17:16.733530Z","shell.execute_reply.started":"2024-07-02T11:17:16.699919Z","shell.execute_reply":"2024-07-02T11:17:16.732411Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]}]}