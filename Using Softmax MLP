{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "1e94651a",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2024-08-26T09:44:54.846659Z",
     "iopub.status.busy": "2024-08-26T09:44:54.846280Z",
     "iopub.status.idle": "2024-08-26T09:44:55.872126Z",
     "shell.execute_reply": "2024-08-26T09:44:55.870954Z"
    },
    "papermill": {
     "duration": 1.03781,
     "end_time": "2024-08-26T09:44:55.874986",
     "exception": false,
     "start_time": "2024-08-26T09:44:54.837176",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/kaggle/input/indian-names-boys-girls/Names.txt\n"
     ]
    }
   ],
   "source": [
    "# This Python 3 environment comes with many helpful analytics libraries installed\n",
    "# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n",
    "# For example, here's several helpful packages to load\n",
    "\n",
    "import numpy as np # linear algebra\n",
    "import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n",
    "\n",
    "# Input data files are available in the read-only \"../input/\" directory\n",
    "# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n",
    "\n",
    "import os\n",
    "for dirname, _, filenames in os.walk('/kaggle/input'):\n",
    "    for filename in filenames:\n",
    "        print(os.path.join(dirname, filename))\n",
    "\n",
    "# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n",
    "# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "02af7497",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-26T09:44:55.891474Z",
     "iopub.status.busy": "2024-08-26T09:44:55.890917Z",
     "iopub.status.idle": "2024-08-26T09:44:59.829347Z",
     "shell.execute_reply": "2024-08-26T09:44:59.828068Z"
    },
    "papermill": {
     "duration": 3.949876,
     "end_time": "2024-08-26T09:44:59.832238",
     "exception": false,
     "start_time": "2024-08-26T09:44:55.882362",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import torch\n",
    "import torch.nn.functional as F\n",
    "import matplotlib.pyplot as plt"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "4cb3610e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-26T09:44:59.848829Z",
     "iopub.status.busy": "2024-08-26T09:44:59.848233Z",
     "iopub.status.idle": "2024-08-26T09:44:59.877589Z",
     "shell.execute_reply": "2024-08-26T09:44:59.876368Z"
    },
    "papermill": {
     "duration": 0.040799,
     "end_time": "2024-08-26T09:44:59.880476",
     "exception": false,
     "start_time": "2024-08-26T09:44:59.839677",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['Aaban',\n",
       " 'Aabharan',\n",
       " 'Aabhas',\n",
       " 'Aabhat',\n",
       " 'Aabheer',\n",
       " 'Aabheer',\n",
       " 'Abheer',\n",
       " 'Aabher']"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "words = open('/kaggle/input/indian-names-boys-girls/Names.txt', 'r').read().splitlines()\n",
    "words[:8]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "345c242c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-26T09:44:59.897283Z",
     "iopub.status.busy": "2024-08-26T09:44:59.896870Z",
     "iopub.status.idle": "2024-08-26T09:44:59.913769Z",
     "shell.execute_reply": "2024-08-26T09:44:59.912128Z"
    },
    "papermill": {
     "duration": 0.02862,
     "end_time": "2024-08-26T09:44:59.916763",
     "exception": false,
     "start_time": "2024-08-26T09:44:59.888143",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "words = [w.lower() for w in words]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "871ebb86",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-26T09:44:59.933626Z",
     "iopub.status.busy": "2024-08-26T09:44:59.933194Z",
     "iopub.status.idle": "2024-08-26T09:44:59.950801Z",
     "shell.execute_reply": "2024-08-26T09:44:59.949352Z"
    },
    "papermill": {
     "duration": 0.02906,
     "end_time": "2024-08-26T09:44:59.953455",
     "exception": false,
     "start_time": "2024-08-26T09:44:59.924395",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{0: ' ', 1: '-', 2: '.', 3: 'a', 4: 'b', 5: 'c', 6: 'd', 7: 'e', 8: 'f', 9: 'g', 10: 'h', 11: 'i', 12: 'j', 13: 'k', 14: 'l', 15: 'm', 16: 'n', 17: 'o', 18: 'p', 19: 'q', 20: 'r', 21: 's', 22: 't', 23: 'u', 24: 'v', 25: 'w', 26: 'x', 27: 'y', 28: 'z'}\n"
     ]
    }
   ],
   "source": [
    "# vocab and encoding\n",
    "chars = sorted(list(set(''.join(words))))\n",
    "stoi = {s:i for i,s in enumerate(chars)}\n",
    "itos = {i:s for s,i in stoi.items()}\n",
    "print(itos)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "5b4f38f8",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-26T09:44:59.970261Z",
     "iopub.status.busy": "2024-08-26T09:44:59.969891Z",
     "iopub.status.idle": "2024-08-26T09:45:02.154191Z",
     "shell.execute_reply": "2024-08-26T09:45:02.153040Z"
    },
    "papermill": {
     "duration": 2.196163,
     "end_time": "2024-08-26T09:45:02.157088",
     "exception": false,
     "start_time": "2024-08-26T09:44:59.960925",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# build the dataset\n",
    "\n",
    "block_size = 3 # context length: how many characters do we take to predict the next one?\n",
    "X, Y = [], []\n",
    "for w in words:\n",
    "    context = [2] * block_size\n",
    "    for ch in w + '.':\n",
    "        ix = stoi[ch]\n",
    "        X.append(context)\n",
    "        Y.append(ix)\n",
    "#         print(''.join(itos[i] for i in context), '--->', itos[ix])\n",
    "        context = context[1:] + [ix] # crop and append\n",
    "\n",
    "X = torch.tensor(X)\n",
    "Y = torch.tensor(Y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "a1d00d21",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-26T09:45:02.174154Z",
     "iopub.status.busy": "2024-08-26T09:45:02.173770Z",
     "iopub.status.idle": "2024-08-26T09:45:02.181618Z",
     "shell.execute_reply": "2024-08-26T09:45:02.180375Z"
    },
    "papermill": {
     "duration": 0.019099,
     "end_time": "2024-08-26T09:45:02.184183",
     "exception": false,
     "start_time": "2024-08-26T09:45:02.165084",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(torch.Size([506379, 3]), torch.int64, torch.Size([506379]), torch.int64)"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X.shape, X.dtype, Y.shape, Y.dtype"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "2cdca716",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-26T09:45:02.202234Z",
     "iopub.status.busy": "2024-08-26T09:45:02.201167Z",
     "iopub.status.idle": "2024-08-26T09:45:04.145101Z",
     "shell.execute_reply": "2024-08-26T09:45:04.143819Z"
    },
    "papermill": {
     "duration": 1.955948,
     "end_time": "2024-08-26T09:45:04.147900",
     "exception": false,
     "start_time": "2024-08-26T09:45:02.191952",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "torch.Size([405025, 3]) torch.Size([405025])\n",
      "torch.Size([50669, 3]) torch.Size([50669])\n",
      "torch.Size([50685, 3]) torch.Size([50685])\n"
     ]
    }
   ],
   "source": [
    "# build train and dev sets\n",
    "block_size = 3 # context length: how many characters do we take to predict the next one?\n",
    "\n",
    "def build_dataset(words):  \n",
    "    X, Y = [], []\n",
    "    for w in words:\n",
    "\n",
    "    #print(w)\n",
    "        context = [2] * block_size\n",
    "        for ch in w + '.':\n",
    "            ix = stoi[ch]\n",
    "            X.append(context)\n",
    "            Y.append(ix)\n",
    "            #print(''.join(itos[i] for i in context), '--->', itos[ix])\n",
    "            context = context[1:] + [ix] # crop and append\n",
    "\n",
    "    X = torch.tensor(X)\n",
    "    Y = torch.tensor(Y)\n",
    "    print(X.shape, Y.shape)\n",
    "    return X, Y\n",
    "\n",
    "import random\n",
    "random.seed(42)\n",
    "random.shuffle(words)\n",
    "n1 = int(0.8*len(words))\n",
    "n2 = int(0.9*len(words))\n",
    "\n",
    "Xtr, Ytr = build_dataset(words[:n1])\n",
    "Xdev, Ydev = build_dataset(words[n1:n2])\n",
    "Xte, Yte = build_dataset(words[n2:])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "5a5c4a8b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-26T09:45:04.165605Z",
     "iopub.status.busy": "2024-08-26T09:45:04.165179Z",
     "iopub.status.idle": "2024-08-26T09:45:04.183451Z",
     "shell.execute_reply": "2024-08-26T09:45:04.182349Z"
    },
    "papermill": {
     "duration": 0.030227,
     "end_time": "2024-08-26T09:45:04.186357",
     "exception": false,
     "start_time": "2024-08-26T09:45:04.156130",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "g = torch.Generator().manual_seed(69)\n",
    "C = torch.randn((29, 10), generator=g) # columns are a hyperparameter\n",
    "W1 = torch.randn((30, 200), generator=g) # rows are columns in C * block_size\n",
    "b1 = torch.randn(200, generator=g)\n",
    "W2 = torch.randn((200, 29), generator=g)\n",
    "b2 = torch.randn(29, generator=g)\n",
    "parameters = [C, W1, b1, W2, b2]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "303f59d7",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-26T09:45:04.203834Z",
     "iopub.status.busy": "2024-08-26T09:45:04.203444Z",
     "iopub.status.idle": "2024-08-26T09:45:04.235846Z",
     "shell.execute_reply": "2024-08-26T09:45:04.234865Z"
    },
    "papermill": {
     "duration": 0.04427,
     "end_time": "2024-08-26T09:45:04.238679",
     "exception": false,
     "start_time": "2024-08-26T09:45:04.194409",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "for p in parameters:\n",
    "    p.requires_grad = True\n",
    "lre = torch.linspace(-3, 0, 1000)\n",
    "lrs = 10**lre"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "93563199",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-26T09:45:04.256868Z",
     "iopub.status.busy": "2024-08-26T09:45:04.256440Z",
     "iopub.status.idle": "2024-08-26T09:45:04.741943Z",
     "shell.execute_reply": "2024-08-26T09:45:04.740525Z"
    },
    "papermill": {
     "duration": 0.497969,
     "end_time": "2024-08-26T09:45:04.744726",
     "exception": false,
     "start_time": "2024-08-26T09:45:04.246757",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[<matplotlib.lines.Line2D at 0x7d0242eb3310>]"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.plot(torch.randint(0, Xtr.shape[0], (32,)).sort()[0])\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "e4e8f6ad",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-26T09:45:04.763973Z",
     "iopub.status.busy": "2024-08-26T09:45:04.763553Z",
     "iopub.status.idle": "2024-08-26T09:47:01.611146Z",
     "shell.execute_reply": "2024-08-26T09:47:01.609966Z"
    },
    "papermill": {
     "duration": 116.868584,
     "end_time": "2024-08-26T09:47:01.622206",
     "exception": false,
     "start_time": "2024-08-26T09:45:04.753622",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "2.119311571121216\n"
     ]
    }
   ],
   "source": [
    "lri = []\n",
    "lossi = []\n",
    "stepi = []\n",
    "for i in range(200000):\n",
    "  \n",
    "    # minibatch construct\n",
    "    ix = torch.randint(0, Xtr.shape[0], (32,))\n",
    "\n",
    "    # forward pass\n",
    "    emb = C[Xtr[ix]] # (32, 3, 10)\n",
    "    h = torch.tanh(emb.view(-1, 30) @ W1 + b1) # (32, 200)\n",
    "    logits = h @ W2 + b2 # (32, 29)\n",
    "    loss = F.cross_entropy(logits, Ytr[ix])\n",
    "    #print(loss.item())\n",
    "\n",
    "    # backward pass\n",
    "    for p in parameters:\n",
    "        p.grad = None\n",
    "    loss.backward()\n",
    "\n",
    "    # update\n",
    "    #lr = lrs[i]\n",
    "    lr = 0.1 if i < 100000 else 0.01\n",
    "    for p in parameters:\n",
    "        p.data += -lr * p.grad\n",
    "\n",
    "    # track stats\n",
    "    #lri.append(lre[i])\n",
    "    stepi.append(i)\n",
    "    lossi.append(loss.log10().item())\n",
    "\n",
    "print(loss.item())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "2148228c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-26T09:47:01.640884Z",
     "iopub.status.busy": "2024-08-26T09:47:01.640455Z",
     "iopub.status.idle": "2024-08-26T09:47:01.718056Z",
     "shell.execute_reply": "2024-08-26T09:47:01.716782Z"
    },
    "papermill": {
     "duration": 0.089986,
     "end_time": "2024-08-26T09:47:01.720731",
     "exception": false,
     "start_time": "2024-08-26T09:47:01.630745",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "lossi.sort(reverse=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "400b2365",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-26T09:47:01.739420Z",
     "iopub.status.busy": "2024-08-26T09:47:01.738979Z",
     "iopub.status.idle": "2024-08-26T09:47:02.090032Z",
     "shell.execute_reply": "2024-08-26T09:47:02.088948Z"
    },
    "papermill": {
     "duration": 0.363329,
     "end_time": "2024-08-26T09:47:02.092683",
     "exception": false,
     "start_time": "2024-08-26T09:47:01.729354",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[<matplotlib.lines.Line2D at 0x7d0240822950>]"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.plot(stepi, lossi)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "ca7c723f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-26T09:47:02.113145Z",
     "iopub.status.busy": "2024-08-26T09:47:02.112732Z",
     "iopub.status.idle": "2024-08-26T09:47:03.005432Z",
     "shell.execute_reply": "2024-08-26T09:47:03.004299Z"
    },
    "papermill": {
     "duration": 0.906198,
     "end_time": "2024-08-26T09:47:03.007935",
     "exception": false,
     "start_time": "2024-08-26T09:47:02.101737",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor(1.9457, grad_fn=<NllLossBackward0>)"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "emb = C[Xtr] # (all, 3, 2)\n",
    "h = torch.tanh(emb.view(-1, 30) @ W1 + b1) # (all, 100)\n",
    "logits = h @ W2 + b2 # (no, 29)\n",
    "loss = F.cross_entropy(logits, Ytr)\n",
    "loss"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "055b1d70",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-26T09:47:03.027824Z",
     "iopub.status.busy": "2024-08-26T09:47:03.027382Z",
     "iopub.status.idle": "2024-08-26T09:47:03.135568Z",
     "shell.execute_reply": "2024-08-26T09:47:03.134469Z"
    },
    "papermill": {
     "duration": 0.12107,
     "end_time": "2024-08-26T09:47:03.138121",
     "exception": false,
     "start_time": "2024-08-26T09:47:03.017051",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor(1.9591, grad_fn=<NllLossBackward0>)"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "emb = C[Xdev] # (32, 3, 2)\n",
    "h = torch.tanh(emb.view(-1, 30) @ W1 + b1) # (32, 100)\n",
    "logits = h @ W2 + b2 # (32, 27)\n",
    "loss = F.cross_entropy(logits, Ydev)\n",
    "loss"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "8fa70bca",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-26T09:47:03.158496Z",
     "iopub.status.busy": "2024-08-26T09:47:03.158078Z",
     "iopub.status.idle": "2024-08-26T09:47:03.521946Z",
     "shell.execute_reply": "2024-08-26T09:47:03.520841Z"
    },
    "papermill": {
     "duration": 0.377242,
     "end_time": "2024-08-26T09:47:03.524744",
     "exception": false,
     "start_time": "2024-08-26T09:47:03.147502",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 800x800 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=(8,8))\n",
    "plt.scatter(C[:,0].data, C[:,1].data, s=200)\n",
    "for i in range(C.shape[0]):\n",
    "    plt.text(C[i,0].item(), C[i,1].item(), itos[i], ha=\"center\", va=\"center\", color='white')\n",
    "plt.grid('minor')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "4bc2f87c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-26T09:47:03.546403Z",
     "iopub.status.busy": "2024-08-26T09:47:03.545969Z",
     "iopub.status.idle": "2024-08-26T09:47:03.554018Z",
     "shell.execute_reply": "2024-08-26T09:47:03.552909Z"
    },
    "papermill": {
     "duration": 0.021929,
     "end_time": "2024-08-26T09:47:03.556718",
     "exception": false,
     "start_time": "2024-08-26T09:47:03.534789",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "torch.Size([1, 3, 10])"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "context = [2] * block_size\n",
    "C[torch.tensor([context])].shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "27dc03cc",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-26T09:47:03.578458Z",
     "iopub.status.busy": "2024-08-26T09:47:03.578018Z",
     "iopub.status.idle": "2024-08-26T09:47:03.638703Z",
     "shell.execute_reply": "2024-08-26T09:47:03.637336Z"
    },
    "papermill": {
     "duration": 0.074734,
     "end_time": "2024-08-26T09:47:03.641511",
     "exception": false,
     "start_time": "2024-08-26T09:47:03.566777",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "jaselan.\n",
      "racajenthan.\n",
      "kavithikiluchavaith.\n",
      "gesh.\n",
      "eigan.\n",
      "abhakti.\n",
      "vasrika.\n",
      "jeevaika.\n",
      "nabdaaranya.\n",
      "aaga.\n",
      "aatamithayamanoonan.\n",
      "nalan.\n",
      "purugeyandyaranbharsan.\n",
      "yathurtan.\n",
      "anandralariraavidharinaiyantagadeva.\n",
      "stkap.\n",
      "karsha.\n",
      "anupitika.\n",
      "suhaanjiladhijawrishthru.\n",
      "debhavandanu.\n"
     ]
    }
   ],
   "source": [
    "g = torch.Generator().manual_seed(420)\n",
    "\n",
    "for _ in range(20):\n",
    "    \n",
    "    out = []\n",
    "    context = [2] * block_size # initialize with all ...\n",
    "    while True:\n",
    "        emb = C[torch.tensor([context])] # (1,block_size,d)\n",
    "        h = torch.tanh(emb.view(1, -1) @ W1 + b1)\n",
    "        logits = h @ W2 + b2\n",
    "        probs = F.softmax(logits, dim=1)\n",
    "        ix = torch.multinomial(probs, num_samples=1, generator=g).item()\n",
    "        context = context[1:] + [ix]\n",
    "        out.append(ix)\n",
    "        if ix == 2:\n",
    "            break\n",
    "    \n",
    "    print(''.join(itos[i] for i in out))"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "none",
   "dataSources": [
    {
     "datasetId": 613951,
     "sourceId": 1098288,
     "sourceType": "datasetVersion"
    }
   ],
   "dockerImageVersionId": 30732,
   "isGpuEnabled": false,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.13"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 133.589302,
   "end_time": "2024-08-26T09:47:04.775753",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2024-08-26T09:44:51.186451",
   "version": "2.5.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
